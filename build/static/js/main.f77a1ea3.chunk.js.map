{"version":3,"sources":["serviceWorker.js","reducers/questionReducer.js","reducers/testReducer.js","reducers/index.js","constants/index.js","components/question-components/QuestionBody/CodeDisplay/index.js","components/question-components/QuestionHeader/index.js","components/question-components/QuestionExplanation/index.js","components/question-components/Question/index.js","fireStoreLogicLayer.js","actions/index.js","components/question-components/QuestionOptions/index.js","components/question-components/AnswerExplanation/index.js","components/question-components/QuestionNavigation/index.js","utils.js","components/QuizWrapper/index.js","components/question-components/QuestionProgress/index.js","components/QuizLogic/index.js","components/Loader/index.js","App.js","components/Routes.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","selectedQuestionID","questionsAttempted","data","rootReducer","combineReducers","questionData","state","arguments","length","undefined","action","type","answers","payload","isMultiAnswer","includes","id","filter","e","concat","Object","objectSpread","wasCorrect","testData","CodeHighlighter","_ref","codeString","react_default","a","createElement","className","light","language","showLineNumbers","lineNumberStyle","marginRight","style","ocean","QuestionHeader","title","completionRate","QuestionExplanation","complete","isIncorrect","explanation","wrongAnswer","role","Question","prompt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","settings","timestampsInSnapshots","updateSelection","nextQuestion","isCorrect","updateQuestionIndex","retrieveData","docName","dispatch","collection","doc","get","then","getQuestions","quizData","QuestionOptions","this","props","_this","options","map","option","key","onClick","handleSelected","react_markdown_default","escapeHtml","source","markdown","renderOptions","Component","connect","bindActionCreators","AnswerExplanation","answerExplanation","referenceImage","src","alt","attemptsRemaining","callBack","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","QuizWrapper","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffledOptions","questionObject","correctAnswerId","questionsAnswered","attempts","setState","_this$props","_this$props$questionO","questionComplexityIndex","_this$state","sort","toString","console","log","_this2","_this$state2","_this$state2$question","QuestionHeader_QuestionHeader","totalQuestionsInInterval","QuestionExplanation_QuestionExplanation","CodeDisplay_CodeHighlighter","Question_Question","question_components_QuestionOptions","AnswerExplanation_AnswerExplanation","question_components_QuestionNavigation","handleGuess","QuestionProgress","percent","width","aria-valuenow","aria-valuemin","aria-valuemax","QuizLogic","b","getPercentComplete","item","round","set","merge","catch","err","warn","QuestionProgress_QuestionProgress","components_QuizWrapper","HandleNextQuestion","propTypes","PropTypes","string","Loader","App","questionDataSet","overflow","particles_default","params","particles","move","speed","position","height","backgroundColor","testBank","components_QuizLogic","Loader_Loader","Router","Switch","Route","path","component","exact","createStoreWithMiddleware","applyMiddleware","thunk","createStore","ReactDOM","render","react_redux_es","store","reducers","BrowserRouter","Routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f77a1ea3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {NEXT_QUESTION, SELECTED_QUESTION, UPDATE_QUESTION_INDEX} from \"../constants\";\n\nconst initialState = {\n    selectedQuestionID: null,\n    questionsAttempted: 0\n};\nexport const quesitonReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SELECTED_QUESTION:\n            if (action.payload.isMultiAnswer) {\n                if (!state.selectedQuestionID) state.selectedQuestionID = [];\n                let answers;\n                if(state.selectedQuestionID.includes(action.payload.id)) {\n                    answers = state.selectedQuestionID.filter(e => e !== action.payload.id);\n                } else {\n                    answers = state.selectedQuestionID.concat(action.payload.id);\n                }\n\n                return {\n                    ...state,\n                    selectedQuestionID: answers\n                };\n            } else {\n                return {\n                    ...state,\n                    selectedQuestionID: action.payload.id\n                };\n            }\n\n        case NEXT_QUESTION:\n            return {\n                ...state,\n                selectedQuestionID: null,\n                questionsAttempted: state.questionsAttempted + 1,\n                wasCorrect: action.payload\n            };\n        case UPDATE_QUESTION_INDEX:\n            return {\n                ...state,\n                questionsAttempted: 0\n            };\n        default:\n            return state;\n    }\n};","import {GET_QUESTIONS} from \"../constants\";\n\nconst initialState = {\n    data: null\n};\nexport const testReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_QUESTIONS:\n            return {\n                ...state,\n                data: action.payload\n            };\n        default:\n            return state;\n    }\n};","import {combineReducers} from 'redux';\nimport {quesitonReducer} from './questionReducer'\nimport {testReducer} from './testReducer'\n\nconst rootReducer = combineReducers({\n    questionData: quesitonReducer,\n    testData: testReducer\n});\nexport default rootReducer;","export const SELECTED_QUESTION = \"SELECTED_QUESTION\";\nexport const NEXT_QUESTION = \"NEXT_QUESTION\";\nexport const UPDATE_QUESTION_INDEX = \"UPDATE_QUESTION_INDEX\";\nexport const GET_QUESTIONS = \"GET_QUESTIONS\";","import React from 'react';\nimport PropTypes from 'prop-types'\nimport {Light as SyntaxHighlighter} from \"react-syntax-highlighter\";\nimport {ocean} from 'react-syntax-highlighter/dist/styles/hljs';\n\nexport const CodeHighlighter = ({codeString}) => {\n    return (\n        <div className=\"row m-4\">\n            <div className=\"col-10 offset-1 text-left\">\n                    <SyntaxHighlighter language='java' showLineNumbers={true} lineNumberStyle={{marginRight: '20px'}}\n                                       style={ocean}>{codeString}</SyntaxHighlighter>\n            </div>\n        </div>\n    )\n};\n\nCodeHighlighter.propTypes = {\n    codeString: PropTypes.string\n};","import React from 'react';\nimport PropTypes from 'prop-types'\n\nexport const QuestionHeader = ({title, completionRate}) => {\n    return (\n        <div className=\"row\">\n            <h6 className=\"col-8\">{title}</h6>\n            <h6 className=\"col-4\">{completionRate}% Completed Total</h6>\n            <hr/>\n        </div>\n    )\n};\n\nQuestionHeader.propTypes = {\n    title: PropTypes.string\n};","import React from 'react';\nimport PropTypes from 'prop-types'\nimport ReactMarkdown from \"react-markdown\";\n\nexport const QuestionExplanation = ({complete, isIncorrect, explanation, wrongAnswer}) => {\n    return (\n        <div className=\"row m-3\">\n            <div className=\"col-12\">\n                {complete ? isIncorrect ? <div className=\"alert alert-danger\" role=\"alert\">\n                        Incorrect\n                    </div> :\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Correct!\n                    </div> : null}\n                {wrongAnswer ? <div className=\"alert alert-danger\" role=\"alert\">Incorrect, Please Try Again</div> : null}\n            </div>\n            <div className=\"col-12 text-left\">\n                {/*<h6>Consider:</h6>*/}\n            </div>\n            <div className=\"col-12 text-left\">\n                {/*<ReactMarkdown escapeHtml={false}*/}\n                {/*source={explanation}/>*/}\n                <p>{explanation}</p>\n            </div>\n        </div>\n    )\n};\n\nQuestionExplanation.propTypes = {\n    explanation: PropTypes.string,\n    complete: PropTypes.bool,\n    isIncorrect: PropTypes.bool\n};","import React from 'react';\nimport PropTypes from 'prop-types'\n\nexport const Question = ({prompt}) => {\n    return (\n        <div className=\"row mx-2\">\n            <div className=\"col-10 offset-1 text-left\">\n                <h6>{prompt}</h6>\n            </div>\n        </div>\n    )\n};\n\nQuestion.propTypes = {\n    prompt: PropTypes.string\n};","import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyBHizhi9yWthb-uvNr_juILneAtp8bZmiQ\",\n    authDomain: \"tiberius-cougar-alpha.firebaseapp.com\",\n    databaseURL: \"https://tiberius-cougar-alpha.firebaseio.com\",\n    projectId: \"tiberius-cougar-alpha\",\n    storageBucket: \"tiberius-cougar-alpha.appspot.com\",\n    messagingSenderId: \"889412483336\"\n};\n\nfirebase.initializeApp(config);\nconst db = firebase.firestore();\n    // .enablePersistence()\n    // .catch(function (err) {\n    //     if (err.code === 'failed-precondition') {\n    //         // Multiple tabs open, persistence can only be enabled\n    //         // in one tab at a a time.\n    //         // ...\n    //     } else if (err.code === 'unimplemented') {\n    //         // The current browser does not support all of the\n    //         // features required to enable persistence\n    //         // ...\n    //     }\n    // });\ndb.settings({ timestampsInSnapshots: true });\nexport default db;\n\n\nexport const updateTest = (docName, data) => {\n    db.collection('test').doc(docName).set({\n        quizData: data\n    }, {merge: true}).then(function () {\n        console.log(\"Document successfully written!\");\n    }).catch((err) => {\n        console.warn('ERROR', err);\n    });\n};\n","// src/js/actions/index.js\nimport { SELECTED_QUESTION ,NEXT_QUESTION, GET_QUESTIONS , UPDATE_QUESTION_INDEX} from \"../constants\";\nimport db from \"../fireStoreLogicLayer\";\nexport const updateSelection = (id, isMultiAnswer) => ({ type: SELECTED_QUESTION, payload: {id, isMultiAnswer} });\nexport const nextQuestion = isCorrect =>  ({ type: NEXT_QUESTION, payload: isCorrect });\nexport const updateQuestionIndex = () => ({type: UPDATE_QUESTION_INDEX});\n\nexport const retrieveData = (docName) => {\n    return dispatch => {\n        db.collection(\"test\").doc(docName).get().then((doc) => {\n            dispatch(getQuestions(doc.data().quizData));\n        });\n    };\n};\n\nexport const getQuestions = (data) => {\n        return {\n            type: GET_QUESTIONS,\n            payload:   data\n        }\n};","import React, {Component} from 'react';\nimport PropTypes from 'prop-types'\nimport ReactMarkdown from \"react-markdown\";\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux'\nimport {updateSelection} from '../../../actions'\n\nclass QuestionOptions extends Component {\n\n    handleSelected(id) {\n        this.props.updateSelection(id, this.props.isMultiAnswer);\n    }\n\n    renderOptions() {\n        let {\n            props: {\n                options\n            }\n        } = this;\n\n        return options.map(option => (\n            <li key={option.id} onClick={() => !this.props.complete && this.handleSelected(option.id)}\n                className={`list-group-item list-group-item-action ${this.props.questionData.selectedQuestionID && this.props.questionData.selectedQuestionID.includes(option.id) ? 'active' : ''} ${this.props.complete ? 'disabled' : null}`}>\n                <div className=\"row\">\n                    {this.props.complete && <div className=\"col-1\"><b>{option.id}</b></div>}\n                    <div className=\"col-11\">\n                        <ReactMarkdown escapeHtml={false}\n                                       source={option.markdown}/>\n                    </div>\n                </div>\n            </li>\n        ))\n    };\n\n    render() {\n        return (\n            <div className=\"row m-3\">\n                <div className=\"col-12\">\n                    <div className=\"card bg-dark text-white text-left\">\n                        <ul className=\"list-group list-group-flush\">\n                            {this.renderOptions()}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        updateSelection\n    }, dispatch);\n}\n\nfunction mapStateToProps(state) {\n    return {\n        questionData: state.questionData\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionOptions);\n\nQuestionOptions.propTypes = {\n    options: PropTypes.array\n};","import React from 'react';\nimport PropTypes from 'prop-types'\nimport ReactMarkdown from \"react-markdown\";\n\nexport const AnswerExplanation = ({answerExplanation, referenceImage}) => {\n    return (\n        <div className=\"row m-3\">\n            <div className=\"col-12\">\n                <div className=\"card border-secondary\">\n                    <div className=\"card-body text-secondary text-left\" role=\"alert\">\n                        <ReactMarkdown escapeHtml={false}\n                                       source={answerExplanation}/>\n                        {/*<p>{answerExplanation}</p>*/}\n                        {referenceImage && <img className=\"img-fluid\" src={referenceImage} alt=\"\"/>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nAnswerExplanation.propTypes = {\n    answerExplanation: PropTypes.string\n};","import React from 'react';\nimport PropTypes from 'prop-types'\nimport {bindActionCreators} from \"redux\";\nimport {connect} from 'react-redux'\nimport {nextQuestion} from \"../../../actions\";\n\nconst QuestionNavigation = ({attemptsRemaining, callBack, isCorrect, complete, nextQuestion}) => {\n    return (\n        <div className=\"row m-3\">\n            {/*<div className=\"col-sm-3 col-md-7 text-left\">*/}\n                {/*<button type=\"button\" className=\"btn btn-outline-light\">Review</button>*/}\n            {/*</div>*/}\n            <div className=\"col-6 text-left\">\n                {!complete && <button type=\"button\" className=\"btn btn-outline-light disabled\">\n                    Attempts Remaining <span className=\"badge badge-light\">{attemptsRemaining}</span>\n                </button>}\n            </div>\n            <div className=\"col-6 text-right\">\n                {!complete ?\n                    <button type=\"button\" onClick={callBack} className=\"btn btn-primary\">Test</button> :\n                    <button type=\"button\" onClick={() => nextQuestion(isCorrect)} className=\"btn btn-primary\">Next</button>\n                }\n            </div>\n        </div>\n    )\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        nextQuestion\n    }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(QuestionNavigation);\n\nQuestionNavigation.propTypes = {\n    callBack: PropTypes.func,\n    attemptsRemaining: PropTypes.number,\n    isCorrect: PropTypes.bool,\n    complete: PropTypes.bool\n};","export function shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux'\nimport {CodeHighlighter} from \"../question-components/QuestionBody/CodeDisplay\";\nimport {QuestionHeader} from \"../question-components/QuestionHeader\";\nimport {QuestionExplanation} from \"../question-components/QuestionExplanation\";\nimport {Question} from \"../question-components/Question\";\nimport QuestionOptions from \"../question-components/QuestionOptions\";\nimport {AnswerExplanation} from \"../question-components/AnswerExplanation\";\nimport QuestionNavigation from \"../question-components/QuestionNavigation\";\nimport {shuffle} from '../../utils'\n\nclass QuizWrapper extends Component {\n    constructor(props) {\n        super(props);\n        this.shuffledOptions = shuffle(props.questionObject.options);\n        const isMultiAnswer = props.questionObject.correctAnswerId.length > 1;\n        this.state = {\n            isCorrect: false,\n            attemptsRemaining: 2,\n            isIncorrect: false,\n            wrongAnswer: false,\n            questionsAnswered: props.attempts,\n            questionObject: props.questionObject,\n            isMultiAnswer\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.state.questionsAnswered !== this.props.attempts) {\n            this.shuffledOptions = shuffle(this.props.questionObject.options);\n            const isMultiAnswer = this.props.questionObject.correctAnswerId.length > 1;\n            this.setState({\n                isCorrect: false,\n                attemptsRemaining: 2,\n                isIncorrect: false,\n                questionsAnswered: this.props.attempts,\n                questionObject: this.props.questionObject,\n                isMultiAnswer\n            });\n        }\n    }\n\n    handleGuess(id) {\n        let {\n            props: {\n                questionObject,\n                questionObject: {\n                    correctAnswerId,\n                    questionComplexityIndex\n                }\n            },\n            state: {\n                attemptsRemaining,\n                isMultiAnswer\n            }\n        } = this;\n        if (isMultiAnswer && correctAnswerId.sort()) {\n            if (correctAnswerId.sort().toString() === id.sort().toString()) {\n                questionObject.questionComplexityIndex = questionComplexityIndex + 0.5;\n                this.setState({\n                    isCorrect: true,\n                    wrongAnswer: false\n                })\n            } else {\n                questionObject.questionComplexityIndex = questionComplexityIndex - 1;\n                if (attemptsRemaining === 1) {\n                    this.setState({\n                        isIncorrect: true,\n                        attemptsRemaining: attemptsRemaining - 1,\n                        wrongAnswer: false\n                    })\n                } else {\n                    this.setState({\n                        attemptsRemaining: attemptsRemaining - 1,\n                        wrongAnswer: true\n                    })\n                }\n            }\n        } else {\n            if (correctAnswerId && id === correctAnswerId) {\n                console.log('correct');\n                questionObject.questionComplexityIndex = questionComplexityIndex + 0.5;\n                this.setState({\n                    isCorrect: true,\n                    wrongAnswer: false\n                })\n            } else {\n                console.log('Not Correct');\n                questionObject.questionComplexityIndex = questionComplexityIndex - 1;\n                if (attemptsRemaining === 1) {\n                    this.setState({\n                        isIncorrect: true,\n                        attemptsRemaining: attemptsRemaining - 1,\n                        wrongAnswer: false\n                    })\n                } else {\n                    this.setState({\n                        attemptsRemaining: attemptsRemaining - 1,\n                        wrongAnswer: true\n                    })\n                }\n            }\n        }\n    }\n\n    render() {\n\n        const {\n            props: {\n                attempts,\n            },\n            state: {\n                isCorrect,\n                attemptsRemaining,\n                isIncorrect,\n                wrongAnswer,\n                isMultiAnswer,\n                questionObject: {\n                    explanation,\n                    prompt,\n                    codeString,\n                    answerExplanation,\n                    referenceImage\n                }\n            }\n        } = this;\n\n        const complete = isCorrect || isIncorrect;\n        return (\n            <div className=\"quizWrapper text-light\">\n                <div className=\"container\">\n                    <QuestionHeader completionRate={this.props.completionRate} title={`Remaining Questions in this round: ${this.props.totalQuestionsInInterval - attempts - 1}`}/>\n                    <QuestionExplanation wrongAnswer={wrongAnswer} complete={complete} isIncorrect={isIncorrect}\n                                         explanation={explanation}/>\n                    {codeString.length > 1 && <CodeHighlighter codeString={codeString}/>}\n                    <Question prompt={prompt}/>\n                    <QuestionOptions isMultiAnswer={isMultiAnswer} complete={complete} options={this.shuffledOptions}/>\n                    {complete && <AnswerExplanation answerExplanation={answerExplanation} referenceImage={referenceImage}/>}\n                    <QuestionNavigation isMultiAnswer={isMultiAnswer} complete={complete} isCorrect={isCorrect}\n                                        attemptsRemaining={attemptsRemaining}\n                                        callBack={() => this.handleGuess(this.props.questionData.selectedQuestionID)}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        questionData: state.questionData\n    };\n}\n\nexport default connect(mapStateToProps)(QuizWrapper);\n\nQuizWrapper.propTypes = {\n    questionObject: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nexport const QuestionProgress = ({percent}) => {\n    return (\n        <div className=\"row m-3\">\n            <div className=\"col-12\">\n                <div className=\"progress\">\n                    <div className=\"progress-bar progress-bar\"\n                         role=\"progressbar\"\n                         style={{width: `${percent}%`}}\n                         aria-valuenow={percent}\n                         aria-valuemin=\"0\" aria-valuemax=\"100\"/>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nQuestionProgress.propTypes = {\n    percent: PropTypes.number\n};","import React, {Component} from 'react';\nimport QuizWrapper from '../QuizWrapper'\nimport {QuestionProgress} from \"../question-components/QuestionProgress\";\nimport PropTypes from \"prop-types\";\nimport {AnswerExplanation} from \"../question-components/AnswerExplanation\";\nimport {connect} from 'react-redux'\nimport {updateQuestionIndex} from '../../actions'\nimport {bindActionCreators} from \"redux\";\nimport {updateTest} from \"../../fireStoreLogicLayer\";\n\n\nclass QuizLogic extends Component {\n    // Logic Layer that is responsible for delivering a specific question. ML that logic.\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalQuestionsInInterval: 9,\n            quizData: props.quizData.sort((a, b) => a.questionComplexityIndex - b.questionComplexityIndex),\n            completionRate: this.getPercentComplete(props.quizData)\n        }\n    }\n\n    getPercentComplete(data){\n        let complete = 0;\n        data.map(item => {\n            return item.questionComplexityIndex > 1.5 ? complete += 1 : null;\n        });\n        return Math.round(complete / data.length);\n    }\n\n    componentDidUpdate() {\n        if (this.props.questionsAttempted === this.state.totalQuestionsInInterval) {\n            this.props.updateQuestionIndex();\n        }\n    }\n\n    HandleNextQuestion() {\n        const {\n            props: {\n                questionsAttempted\n            },\n            state: {\n                quizData,\n                totalQuestionsInInterval\n            }\n        } = this;\n\n        console.log('Total Questions: ', quizData.length);\n        console.log('Questions: ', quizData);\n        if (questionsAttempted === totalQuestionsInInterval) {\n            updateTest('testOne', quizData);\n            quizData.sort((a, b) => a.questionComplexityIndex - b.questionComplexityIndex);\n        }\n        return quizData[questionsAttempted]\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container p-0\">\n                    <div className=\"row text-center\">\n                        <div className=\"col-12\">\n                            <QuestionProgress\n                                percent={(this.props.questionsAttempted / (this.state.totalQuestionsInInterval - 1)) * 100}/>\n                            <QuizWrapper attempts={this.props.questionsAttempted}\n                                         questionObject={this.HandleNextQuestion()}\n                                         completionRate={this.state.completionRate}\n                                         totalQuestionsInInterval={this.state.totalQuestionsInInterval}/>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        questionsAttempted: state.questionData.questionsAttempted\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        updateQuestionIndex\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizLogic);\n\n\nAnswerExplanation.propTypes = {\n    quizData: PropTypes.string\n};","import React from \"react\";\nimport './index.css';\n\nexport const Loader = () => {\n    return (\n        <div className=\"lds-default\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    )\n};","import React, {Component} from 'react';\nimport QuizLogic from \"./components/QuizLogic\";\nimport Particles from 'react-particles-js';\nimport {Loader} from \"./components/Loader\";\nimport {connect} from 'react-redux';\nimport {retrieveData} from './actions'\nimport {bindActionCreators} from \"redux\";\nimport './index.css';\nimport {questionDataSetTest} from './test-data'\nimport {updateTest} from './fireStoreLogicLayer';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionDataSet: undefined\n        }\n    }\n\n    componentDidMount() {\n\n        // updateTest('testOne', questionDataSetTest);\n\n        this.props.retrieveData('testOne')\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\" style={{overflow: 'hidden'}}>\n                <Particles\n                    params={{\n                        particles: {\n                            move: {\n                                speed: 0.3,\n                            }\n                        }\n                    }}\n                    style={{\n                        position: 'fixed',\n                        width: '100vw',\n                        height: '100vh',\n                        backgroundColor: 'rgb(43, 48, 59)',\n                        filter: 'blur(1px)'\n                    }}\n                />\n                {this.props.testBank ? <QuizLogic quizData={this.props.testBank}/> : <Loader/>}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        testBank: state.testData.data\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        retrieveData\n    }, dispatch);\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport App from \"../App\";\n\nconst Router = () => (\n    <main>\n        <Switch>\n            <Route path='*' component={App}/>\n            <Route exact path='/test' component={App}/>\n            <Route exact path='/test/1' component={App}/>\n            {/*<Route path='*' component={() => '404'}/>*/}\n        </Switch>\n    </main>\n);\n\nexport default Router\n","import 'bootstrap/dist/css/bootstrap.min.css';\n// eslint-disable-next-line\nimport $ from 'jquery';\n// eslint-disable-next-line\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from \"./reducers\";\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport {BrowserRouter} from 'react-router-dom'\nimport Routes from './components/Routes';\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <BrowserRouter>\n            <Routes/>\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}